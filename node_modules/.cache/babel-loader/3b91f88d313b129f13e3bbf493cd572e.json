{"ast":null,"code":"import { ADD_NEW_TASK, TASK_COMPLETED, UPDATE_TASK, FETCH_TASK } from './constants.js';\nconst initialState = {\n  tasks: [{\n    id: 54,\n    name: 'Task 1',\n    description: '',\n    status: 'incomplete'\n  }, {\n    id: 55,\n    name: 'Task 2',\n    description: '',\n    status: 'incomplete'\n  }, {\n    id: 56,\n    name: 'Task 3',\n    description: '',\n    status: 'completed'\n  }, {\n    id: 57,\n    name: 'Task 4',\n    description: '',\n    status: 'incomplete'\n  }, {\n    id: 58,\n    name: 'Task 5',\n    description: '',\n    status: 'incomplete'\n  }, {\n    id: 59,\n    name: 'task 6',\n    description: '',\n    status: 'completed'\n  }, {\n    id: 60,\n    name: 'task 7',\n    description: '',\n    status: 'incomplete'\n  }],\n  toUpdate: []\n};\nexport const taskManagement = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ADD_NEW_TASK:\n      return { ...state,\n        tasks: [...state.tasks, action.payload]\n      };\n\n    case TASK_COMPLETED:\n      console.log(\"action payload = \", action.payload);\n      let task = state.tasks.filter(task => task.id === action.payload.id); // console.log(\"1\",task);\n\n      task[0].status = \"completed\"; // console.log(\"Task Completed\", task);\n\n      const otherTasks = state.tasks.filter(task => task.id !== action.payload);\n      return { ...state,\n        tasks: [...otherTasks, task[0]]\n      };\n\n    case UPDATE_TASK:\n      // console.log(\"inReducer\",action.payload);\n      let allTasks = state.tasks.filter(task => task.id !== action.payload.id);\n      allTasks = [...allTasks, action.payload]; // console.log(\"Tasks\",allTasks);\n      // console.log(\"Before\", state);\n\n      state.toUpdate.pop(); // console.log(\"After\", state);\n\n      let newState1 = { ...state,\n        tasks: allTasks\n      }; // console.log(\"After Update\",newState1);\n\n      return newState1;\n\n    case FETCH_TASK:\n      // console.log(\"In Reducer\",action.payload.id);\n      let taskToUpdate = state.tasks.filter(task => task.id === action.payload.id); // console.log(\"Fetched Task =\",taskToUpdate[0]);\n\n      const newState = { ...state,\n        toUpdate: taskToUpdate\n      }; // console.log(\"Before\",newState);\n\n      return newState;\n\n    case DELETE_TASK:\n      const requiredTasks = state.tasks.filter(task => task.id === action.payload.id);\n      console.log(\"Deleting task\", requiredTasks);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/rana/Documents/react_apps/ToDoList App/todo_list/src/reducers.js"],"names":["ADD_NEW_TASK","TASK_COMPLETED","UPDATE_TASK","FETCH_TASK","initialState","tasks","id","name","description","status","toUpdate","taskManagement","state","action","type","payload","console","log","task","filter","otherTasks","allTasks","pop","newState1","taskToUpdate","newState","DELETE_TASK","requiredTasks"],"mappings":"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","sourcesContent":["import {\n\tADD_NEW_TASK,\n\tTASK_COMPLETED,\n\tUPDATE_TASK,\n\tFETCH_TASK,\n} from './constants.js';\n\n\nconst initialState={\n\ttasks:[\n\t\t{\n\t\t\tid:54, \n\t\t\tname: 'Task 1',\n\t\t\tdescription: '',\n\t\t\tstatus: 'incomplete'\n\t\t},\n\t\t{\n\t\t\tid:55,\n\t\t\tname: 'Task 2',\n\t\t\tdescription: '',\n\t\t\tstatus: 'incomplete'\n\t\t},\n\t\t{\n\t\t\tid:56,\n\t\t\tname: 'Task 3',\n\t\t\tdescription: '',\n\t\t\tstatus: 'completed'\n\t\t},\n\t\t{\n\t\t\tid:57,\n\t\t\tname: 'Task 4',\n\t\t\tdescription: '',\n\t\t\tstatus: 'incomplete'\n\t\t},\n\t\t{\n\t\t\tid:58,\n\t\t\tname: 'Task 5',\n\t\t\tdescription: '',\n\t\t\tstatus: 'incomplete'\n\t\t},\n\t\t{\n\t\t\tid:59,\n\t\t\tname: 'task 6',\n\t\t\tdescription: '',\n\t\t\tstatus: 'completed'\n\t\t},\n\t\t{\n\t\t\tid:60,\n\t\t\tname:'task 7',\n\t\t\tdescription: '',\n\t\t\tstatus: 'incomplete'\n\t\t}\n\t],\n\ttoUpdate: [\n\t]\n}\n\nexport const taskManagement = (state=initialState, action={})=>{\n\tswitch(action.type)\n\t{\n\t\tcase ADD_NEW_TASK:\n\t\t\treturn {...state,tasks:[...state.tasks,action.payload]}\n\t\tcase TASK_COMPLETED:\n\t\t\tconsole.log(\"action payload = \",action.payload);\n\t\t\tlet task = state.tasks.filter(task=>task.id===action.payload.id)\n\t\t\t// console.log(\"1\",task);\n\t\t\ttask[0].status = \"completed\";\n\t\t\t// console.log(\"Task Completed\", task);\n\t\t\tconst otherTasks = state.tasks.filter(task=>task.id!==action.payload)\n\t\t\treturn {...state,tasks:[...otherTasks,task[0]]}\n\t\tcase UPDATE_TASK:\n\t\t\t// console.log(\"inReducer\",action.payload);\n\t\t\tlet allTasks = state.tasks.filter(task=> task.id !== action.payload.id)\n\t\t\tallTasks = [...allTasks,action.payload];\n\t\t\t// console.log(\"Tasks\",allTasks);\n\t\t\t// console.log(\"Before\", state);\n\t\t\tstate.toUpdate.pop();\n\t\t\t// console.log(\"After\", state);\n\t\t\tlet newState1 = {...state,tasks:allTasks};\n\t\t\t// console.log(\"After Update\",newState1);\n\t\t\treturn newState1;\n\t\tcase FETCH_TASK:\n\t\t\t// console.log(\"In Reducer\",action.payload.id);\n\t\t\tlet taskToUpdate = state.tasks.filter(task=>task.id===action.payload.id)\n\t\t\t// console.log(\"Fetched Task =\",taskToUpdate[0]);\n\t\t\tconst newState = {...state, toUpdate:taskToUpdate}\n\t\t\t// console.log(\"Before\",newState);\n\t\t\treturn newState;\n\t\tcase DELETE_TASK:\n\t\t\tconst requiredTasks = state.tasks.filter(task=>task.id === action.payload.id)\n\t\t\tconsole.log(\"Deleting task\", requiredTasks);\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n \n"]},"metadata":{},"sourceType":"module"}