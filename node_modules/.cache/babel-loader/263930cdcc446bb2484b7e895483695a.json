{"ast":null,"code":"import { ADD_NEW_TASK, TASK_COMPLETED, UPDATE_TASK, FETCH_TASK, DELETE_TASK } from './constants.js';\nconst initialState = {\n  tasks: [],\n  toUpdate: []\n};\nexport const taskManagement = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ADD_NEW_TASK:\n      return { ...state,\n        tasks: [...state.tasks, action.payload]\n      };\n\n    case TASK_COMPLETED:\n      console.log(\"action payload = \", action.payload);\n      let task = state.tasks.filter(task => task.id === action.payload.id); // console.log(\"1\",task);\n\n      task[0].status = \"completed\"; // console.log(\"Task Completed\", task);\n\n      const otherTasks = state.tasks.filter(task => task.id !== action.payload.id); // console.log(\"Other Tasks = \",otherTasks);\n\n      return { ...state,\n        tasks: [...otherTasks, task[0]]\n      };\n    // console.log(\"After Completed!\",news);\n\n    case UPDATE_TASK:\n      // console.log(\"inReducer\",action.payload);\n      let allTasks = state.tasks.filter(task => task.id !== action.payload.id);\n      allTasks = [...allTasks, action.payload]; // console.log(\"Tasks\",allTasks);\n      // console.log(\"Before\", state);\n\n      state.toUpdate.pop(); // console.log(\"After\", state);\n\n      let newState1 = { ...state,\n        tasks: allTasks\n      }; // console.log(\"After Update\",newState1);\n\n      return newState1;\n\n    case FETCH_TASK:\n      // console.log(\"In Reducer\",action.payload.id);\n      let taskToUpdate = state.tasks.filter(task => task.id === action.payload.id); // console.log(\"Fetched Task =\",taskToUpdate[0]);\n\n      return { ...state,\n        toUpdate: taskToUpdate\n      };\n    // console.log(\"Before\",newState);\n\n    case DELETE_TASK:\n      const requiredTasks = state.tasks.filter(task => task.id !== action.payload.id);\n      console.log(\"Deleting task\", requiredTasks);\n      return { ...state,\n        tasks: requiredTasks\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/rana/Documents/react_apps/ToDoList App/Task-Manager/src/reducers.js"],"names":["ADD_NEW_TASK","TASK_COMPLETED","UPDATE_TASK","FETCH_TASK","DELETE_TASK","initialState","tasks","toUpdate","taskManagement","state","action","type","payload","console","log","task","filter","id","status","otherTasks","allTasks","pop","newState1","taskToUpdate","requiredTasks"],"mappings":"AAAA,SACCA,YADD,EAECC,cAFD,EAGCC,WAHD,EAICC,UAJD,EAKCC,WALD,QAMO,gBANP;AASA,MAAMC,YAAY,GAAC;AAClBC,EAAAA,KAAK,EAAC,EADY;AAElBC,EAAAA,QAAQ,EAAE;AAFQ,CAAnB;AAKA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAK,GAACJ,YAAP,EAAqBK,MAAM,GAAC,EAA5B,KAAiC;AAC9D,UAAOA,MAAM,CAACC,IAAd;AAEC,SAAKX,YAAL;AACC,aAAO,EAAC,GAAGS,KAAJ;AAAUH,QAAAA,KAAK,EAAC,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAgBI,MAAM,CAACE,OAAvB;AAAhB,OAAP;;AACD,SAAKX,cAAL;AACCY,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCJ,MAAM,CAACE,OAAvC;AACA,UAAIG,IAAI,GAAGN,KAAK,CAACH,KAAN,CAAYU,MAAZ,CAAmBD,IAAI,IAAEA,IAAI,CAACE,EAAL,KAAUP,MAAM,CAACE,OAAP,CAAeK,EAAlD,CAAX,CAFD,CAGC;;AACAF,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQG,MAAR,GAAiB,WAAjB,CAJD,CAKC;;AACA,YAAMC,UAAU,GAAGV,KAAK,CAACH,KAAN,CAAYU,MAAZ,CAAmBD,IAAI,IAAEA,IAAI,CAACE,EAAL,KAAUP,MAAM,CAACE,OAAP,CAAeK,EAAlD,CAAnB,CAND,CAOC;;AACA,aAAO,EAAC,GAAGR,KAAJ;AAAUH,QAAAA,KAAK,EAAC,CAAC,GAAGa,UAAJ,EAAeJ,IAAI,CAAC,CAAD,CAAnB;AAAhB,OAAP;AACA;;AACD,SAAKb,WAAL;AACC;AACA,UAAIkB,QAAQ,GAAGX,KAAK,CAACH,KAAN,CAAYU,MAAZ,CAAmBD,IAAI,IAAGA,IAAI,CAACE,EAAL,KAAYP,MAAM,CAACE,OAAP,CAAeK,EAArD,CAAf;AACAG,MAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAaV,MAAM,CAACE,OAApB,CAAX,CAHD,CAIC;AACA;;AACAH,MAAAA,KAAK,CAACF,QAAN,CAAec,GAAf,GAND,CAOC;;AACA,UAAIC,SAAS,GAAG,EAAC,GAAGb,KAAJ;AAAUH,QAAAA,KAAK,EAACc;AAAhB,OAAhB,CARD,CASC;;AACA,aAAOE,SAAP;;AACD,SAAKnB,UAAL;AACC;AACA,UAAIoB,YAAY,GAAGd,KAAK,CAACH,KAAN,CAAYU,MAAZ,CAAmBD,IAAI,IAAEA,IAAI,CAACE,EAAL,KAAUP,MAAM,CAACE,OAAP,CAAeK,EAAlD,CAAnB,CAFD,CAGC;;AACA,aAAO,EAAC,GAAGR,KAAJ;AAAWF,QAAAA,QAAQ,EAACgB;AAApB,OAAP;AACA;;AAED,SAAKnB,WAAL;AACC,YAAMoB,aAAa,GAAGf,KAAK,CAACH,KAAN,CAAYU,MAAZ,CAAmBD,IAAI,IAAEA,IAAI,CAACE,EAAL,KAAYP,MAAM,CAACE,OAAP,CAAeK,EAApD,CAAtB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BU,aAA7B;AACA,aAAO,EAAC,GAAGf,KAAJ;AAAWH,QAAAA,KAAK,EAACkB;AAAjB,OAAP;;AACD;AACC,aAAOf,KAAP;AArCF;AAuCA,CAxCM","sourcesContent":["import {\n\tADD_NEW_TASK,\n\tTASK_COMPLETED,\n\tUPDATE_TASK,\n\tFETCH_TASK,\n\tDELETE_TASK,\n} from './constants.js';\n\n\nconst initialState={\n\ttasks:[],\n\ttoUpdate: []\n}\n\nexport const taskManagement = (state=initialState, action={})=>{\n\tswitch(action.type)\n\t{\n\t\tcase ADD_NEW_TASK:\n\t\t\treturn {...state,tasks:[...state.tasks,action.payload]}\n\t\tcase TASK_COMPLETED:\n\t\t\tconsole.log(\"action payload = \",action.payload);\n\t\t\tlet task = state.tasks.filter(task=>task.id===action.payload.id)\n\t\t\t// console.log(\"1\",task);\n\t\t\ttask[0].status = \"completed\";\n\t\t\t// console.log(\"Task Completed\", task);\n\t\t\tconst otherTasks = state.tasks.filter(task=>task.id!==action.payload.id)\n\t\t\t// console.log(\"Other Tasks = \",otherTasks);\n\t\t\treturn {...state,tasks:[...otherTasks,task[0]]}\n\t\t\t// console.log(\"After Completed!\",news);\n\t\tcase UPDATE_TASK:\n\t\t\t// console.log(\"inReducer\",action.payload);\n\t\t\tlet allTasks = state.tasks.filter(task=> task.id !== action.payload.id)\n\t\t\tallTasks = [...allTasks,action.payload];\n\t\t\t// console.log(\"Tasks\",allTasks);\n\t\t\t// console.log(\"Before\", state);\n\t\t\tstate.toUpdate.pop();\n\t\t\t// console.log(\"After\", state);\n\t\t\tlet newState1 = {...state,tasks:allTasks};\n\t\t\t// console.log(\"After Update\",newState1);\n\t\t\treturn newState1;\n\t\tcase FETCH_TASK:\n\t\t\t// console.log(\"In Reducer\",action.payload.id);\n\t\t\tlet taskToUpdate = state.tasks.filter(task=>task.id===action.payload.id)\n\t\t\t// console.log(\"Fetched Task =\",taskToUpdate[0]);\n\t\t\treturn {...state, toUpdate:taskToUpdate}\n\t\t\t// console.log(\"Before\",newState);\n\t\t\t\n\t\tcase DELETE_TASK:\n\t\t\tconst requiredTasks = state.tasks.filter(task=>task.id !== action.payload.id)\n\t\t\tconsole.log(\"Deleting task\", requiredTasks);\n\t\t\treturn {...state, tasks:requiredTasks};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n \n"]},"metadata":{},"sourceType":"module"}